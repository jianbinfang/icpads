\section{Overview of our approach}


\begin{figure}
\begin{center}
\includegraphics[width=0.48\textwidth]{figure/workflow.pdf}
\end{center}
\caption{Our three-stage approach for predicting the best processor configuration and scheduling the rendering process. }
\vspace{-2mm}
\label{fig:workflow}
\end{figure}

%We have implemented our approach as
%a plugin for the Google Chromium Browser and evaluated it on an ARM big.LTTILE platform (See Section~\ref{sec:setup}).


Figure 3 depicts our three-stage approach for predicting the right processor
configuration when rendering a webpage.  When the web contents (e.g. the HTML source,
CSS files and javascripts) are downloaded, they will be  parsed to construct a
DOM tree together with style rules. This is performed by the default parser of the browser. Our approach begins from extracting information (\emph{termed as feature extraction}),
from the DOM tree and style data to characterize the web workload.
This information (or features) includes counting different HTML tags, DOM nodes and style rules. A complete list of the features is given in Table~\ref{tab:selected_features}.
%We wait until the entire HTML page  are downloaded (but not  multi-media contents such as images, videos and audio, which often take longer to download) before extracting the features.
Then, a machine learning based predictor
(that is built off-line) takes in these feature values and predicts which core to use to
run the rendering engine and
at what frequencies the processors of the platform should operate (i.e. to determine at what frequencies to run the rendering process and other web browser threads). Finally, we configure
the processors and schedule
the rendering engine to run on the predicted core.


Our approach is implemented as a web browser extension which will be invoked as soon as a DOM tree is constructed.
Re-prediction and rescheduling will be triggered if there are significant changes
of the DOM tree structure, so that we can adapt to the change of web contents.
Note that we let the Linux operating system to schedule other web browser threads such as the input/output process.

\paragraph*{Optimisation Goals} In this work we target three important optimization metrics:
(a) load time (which aims to
render the webpage as quick as possible), (b) energy consumption (which aims to
use as less energy as possible) and (c) EDP (which aims to balance the load time and energy consumption).
For each metric, we construct a predictor using the same learning methodology described in the next section.

%At the heart of our approach is the processor configuration predictor. In the
%following section, we will describe how a machine learning based model can be
%built to predict the best processor configuration of any \emph{unseen} web contents on heterogenous mobile platforms.


%Figure~\ref{fig:workflow} illustrates our approach. We extract
%features that influence the loading performance from HTML and CSS files for each web page.
%These features are then used to predict
%the ideal configuration for running
%the render process when loading a specified web page on the
%ARM big.LITTLE mobile platform.
%The prediction is achieved by way of a machine learning model.
%Finally, on the basis of the prediction,
%the render process will be mapped on the best configuration
%to render the contents that will be diplayed.
%
%At the center of this approach is the predictive model.
%In the following section, we will describe how a machine-learning based mapping model can be
%built to predict the best configuration of any upcoming web pages.
%

